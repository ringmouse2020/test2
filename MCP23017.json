{"MCP23017.ts":"\n/**\n * 使用此文件来定义自定义函数和图形块。\n * 想了解更详细的信息，请前往 https://makecode.microbit.org/blocks/custom\n */\n \n/**\n * 自定义图形块\n */\n \n enum REGISTER {\n    IODIRA = 0x00,\n    IODIRB = 0x01,\n    IPOLA = 0x02,\n    IPOLB = 0x03,\n    GPINTENA = 0x04,\n    GPINTENB = 0x05,\n    DEFVALA = 0x06,\n    DEFVALB = 0x07,\n    INTCONA = 0x08,\n    INTCONB = 0x09,\n    IOCONA = 0x0A,\n    IOCONB = 0x0B,\n    GPPUA = 0x0C,\n    GPPUB = 0x0D,\n    INTFA = 0x0E,\n    INTFB = 0x0F,\n    INTCAPA = 0x10,\n    INTCAPB = 0x11,\n    GPIOA = 0x12,\n    GPIOB = 0x13,\n    OLATA = 0x14,\n    OLATB = 0x15\n}\n \nenum PIN {\n    A = 0,\n    B = 1\n}\n\n \n//% weight=5 color=#9900CC icon=\"\\uf53b\"\nnamespace MCP23017 {\n    const MCP23017_ADDRESS = 0x20\n \n    const MCP23017_IODIRA = 0x00\n    const MCP23017_IPOLA = 0x02\n    const MCP23017_GPINTENA = 0x04\n    const MCP23017_DEFVALA = 0x06\n    const MCP23017_INTCONA = 0x08\n    const MCP23017_IOCONA = 0x0A\n    const MCP23017_GPPUA = 0x0C\n    const MCP23017_INTFA = 0x0E\n    const MCP23017_INTCAPA = 0x10\n    const MCP23017_GPIOA = 0x12\n    const MCP23017_OLATA = 0x14\n \n    const MCP23017_IODIRB = 0x01\n    const MCP23017_IPOLB = 0x03\n    const MCP23017_GPINTENB = 0x05\n    const MCP23017_DEFVALB = 0x07\n    const MCP23017_INTCONB = 0x09\n    const MCP23017_IOCONB = 0x0B\n    const MCP23017_GPPUB = 0x0D\n    const MCP23017_INTFB = 0x0F\n    const MCP23017_INTCAPB = 0x11\n    const MCP23017_GPIOB = 0x13\n    const MCP23017_OLATB = 0x15\n \n    let initialized = false\n \n    function i2cwrite(addr: number, reg: number, value: number): void {\n        let buf = pins.createBuffer(2);\n        buf[0] = reg;\n        buf[1] = value;\n        pins.i2cWriteBuffer(addr, buf);\n    }\n \n    function i2cread(addr: number, reg: number): number {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n \n    function initMCP23017(): void {\n        for (let regAddr = 0; regAddr < 22; regAddr++) {\n            if (regAddr == 0 || regAddr == 1) {\n                i2cwrite(MCP23017_ADDRESS, regAddr, 0xFF);\n            }\n            else {\n                i2cwrite(MCP23017_ADDRESS, regAddr, 0x00);\n            }\n        }\n \n        //configue all PinA output\n        i2cwrite(MCP23017_ADDRESS, MCP23017_IODIRA, 0x00);\n \n        //configue all PinB input\n        i2cwrite(MCP23017_ADDRESS, MCP23017_IODIRB, 0xFF);\n        //configue all PinB pullUP\n        i2cwrite(MCP23017_ADDRESS, MCP23017_GPPUB, 0xFF);\n \n        initialized = true;\n    }\n \n \n    /**\n     *Read data from the register\n     * @param reg [0-21] register of mcp23017; eg: 0, 15, 23\n    */\n    //% blockId=ReadReg block=\"Read register |%reg| data\"\n    //% weight=65\n    export function ReadReg(reg: REGISTER): number {\n        let val = i2cread(MCP23017_ADDRESS, reg);\n        return val;\n    }\n \n \n    /**\n     * WriteData to PinA or PinB\n     * @param pin [0-1] choose PinA or PinB; eg: 0, 1\n     * @param value [0-255] pulse of servo; eg: 128, 0, 255\n    */\n    //% blockId=WritePin block=\"Set P |%pin| value |%value|\"\n    //% weight=75\n    //% value.min=0 value.max=255\n    export function WritePin(pin: PIN, value: number): void {\n        if (!initialized) {\n            initMCP23017();\n        }\n        if (pin == 0) {\n            i2cwrite(MCP23017_ADDRESS, MCP23017_GPIOA, value);\n        }\n        else {\n            i2cwrite(MCP23017_ADDRESS, MCP23017_GPIOB, value);\n        }\n    }\n \n    /**\n     *ReadData From PinA or PinB \n     * @param pin [0-1] choose PinA or PinB; eg: 0, 1\n    */\n    //% blockId=ReadPin block=\"Read data from |%pin|\"\n    //% weight=85\n    export function ReadPin(pin: PIN): number {\n        if (!initialized) {\n            initMCP23017();\n        }\n        if (pin == 0) {\n            let val = i2cread(MCP23017_ADDRESS, MCP23017_GPIOA);\n            return val;\n        }\n        else {\n            let val = i2cread(MCP23017_ADDRESS, MCP23017_GPIOB);\n            return val;\n        }\n    }\n   \n    /**\n     *Mytest From PinA or PinB \n     * @param pin [0-1] choose PinA or PinB; eg: 0, 1\n    */\n    //% blockId=Mytest block=\"Mytest data from |%pin|\"\n    //% weight=85\n    export function Mytest(pin: PIN): string\n    {\n /*       \n        if (pin == 0)\n        {\n            pins.P0.digitalWrite(true);\n            pins.P2.digitalWrite(false);\n        }\n        else\n        {\n            pins.P0.digitalWrite(false);\n            pins.P2.digitalWrite(true);\n        }\n*/        \n //       serial.setBaudRate(115200);\n//        serial.writeString(\"0123456789\");\n//        return serial.readString();\n        return \"serial test.\";\n    }    \n}","README.md":"\n> Open this page at [https://.github.io//](https://.github.io//)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open []()\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/** and import\n\n## Edit this project ![Build status badge](https://github.com//workflows/MakeCode/badge.svg)\n\nTo edit this repository in MakeCode.\n\n* open []()\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/** and click import\n\n## Blocks preview\n\nThis image shows the blocks code from the last commit in master.\nThis image may take a few minutes to refresh.\n\n![A rendered view of the blocks](https://github.com//raw/master/.github/makecode/blocks.png)\n\n#### Metadata (used for search, rendering)\n\n* for PXT/\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","pxt.json":"{\n    \"name\": \"MCP23017\",\n    \"version\": \"0.0.0\",\n    \"description\": \"MCP23017 Io Expansion Borad for Microbit\",\n    \"license\": \"MIT\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"README.md\",\n        \"main.blocks\",\n        \"MCP23017.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"public\": true,\n    \"targetVersions\": {\n        \"branch\": \"v3.1.87\",\n        \"tag\": \"v3.1.87\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/4b79db779ce24b3244930f45b94033f20c019886\",\n        \"target\": \"3.1.87\",\n        \"pxt\": \"6.13.42\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n","test.ts":"/* tests go here; this will not be compiled when this package is used as a library*/\nbasic.forever(() =>\n{\n    MCP23017.WritePin(0, 85);\n})"}